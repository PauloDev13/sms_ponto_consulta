import streamlit as st

from time import sleep


# Fun√ß√£o que insere '.' e '-' no n√∫mero do CPF, caso tenha sido
# informado somente n√∫meros.
def format_cpf(cpf: str) -> str:
    return f'{cpf[:3]}.{cpf[3:6]}.{cpf[6:9]}-{cpf[9:]}'


# Instancia mensagem de alerta de acordo com os par√¢metro informados
def default_msg(msg: str, type_msg: any):
    try:
        match type_msg:
            case 'success':
                type_msg = st.success(msg, icon='üëç')
            case 'warning':
                type_msg = st.warning(msg, icon='üëä')
            case 'info':
                type_msg = st.info(msg, icon='üëÜ')
            case _:
                type_msg = st.error(msg, icon='üëé')
            # case 'error' :
            #     type_msg = st.error(msg, icon='üëé')
        sleep(3)
        type_msg.empty()
        return type_msg

    except Exception as ex:
        utils.default_msg('Erro na messege', 'error')
        print(f'Erro stacktrace: {ex}')

# Fun√ß√£o para validar as datas
def validate_dates(date_start, date_end):
    try:
        if not date_start:
            default_msg('A data de in√≠cio √© obrigat√≥ria.!', 'info')
            return False
        if not date_end:
            default_msg('A data final √© obrigat√≥ria!', 'info')
            return False
        if date_start > date_end:
            default_msg('A data de in√≠cio n√£o pode ser posterior √† data final!', 'error')
            return False
        return True
    except Exception as ex:
        utils.default_msg('Erro ao validar datas', 'error')
        print(f'Erro stacktrace: {ex}')


# Fun√ß√£o para validar o CPF
def validate_cpf(cpf):
    try:
        # Remove caracteres n√£o num√©ricos
        cpf = ''.join(filter(str.isdigit, cpf))

        if not cpf:
            default_msg('O campo CPF √© obrigat√≥rio!', 'info')
            return False

        if len(cpf) != 11:
            default_msg('CPF inv√°lido', 'info')
            return False

        if cpf == cpf[0] * 11:
            default_msg('CPF inv√°lido', 'info')
            return False

        # Calcula o primeiro d√≠gito verificador
        sum_ = sum(int(cpf[i]) * (10 - i) for i in range(9))
        first_digit = (sum_ * 10 % 11) % 10

        # Calcula o segundo d√≠gito verificador
        sum_ = sum(int(cpf[i]) * (11 - i) for i in range(10))
        second_digit = (sum_ * 10 % 11) % 10

        # Verifica se os d√≠gitos calculados s√£o iguais aos d√≠gitos verificadores do CPF
        if first_digit == int(cpf[9]) and second_digit == int(cpf[10]):
            return True
        else:
            default_msg('CPF inv√°lido', 'info')
            return False
    except Exception as ex:
        utils.default_msg('Erro ao validar CPF', 'error')
        print(f'Erro stacktrace: {ex}')